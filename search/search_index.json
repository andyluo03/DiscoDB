{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DiscoDB Documentation","text":"<p>DiscoDB is a NoSQL document-based database written in Python.</p> <p>Features:</p> <ul> <li>Intuitive API ideal for everyone from beginners to veterans</li> <li>Infinite storage using the Discord Web API</li> <li>Secured requests using JWT authorization</li> <li>Various optimizations to improve performance</li> </ul>"},{"location":"authentication/","title":"Authentication","text":"<p>DiscoDB uses JSON Web Tokens (JWTs) to authenticate requests. To obtain one, use the login endpoint. Then, authenticate your requests by adding the <code>Authorization</code>header with the value <code>Bearer &lt;token&gt;</code>, where  is the JWT you obtained from the login endpoint. <pre><code>Authorization: Bearer &lt;token&gt;\n</code></pre>"},{"location":"authentication/#best-practices","title":"Best Practices","text":"<ul> <li>Do not push your tokens to version control. Otherwise, your teammates will be mad at you!!!</li> <li>Use sessionStorage instead of localStorage on browsers to prevent XSS attacks</li> </ul>"},{"location":"quickstart/","title":"Quickstart","text":""},{"location":"quickstart/#prerequisites","title":"Prerequisites","text":"<p>DiscoDB was written using Python 3.8, it has not been tested on other Python versions.</p>"},{"location":"quickstart/#installation","title":"Installation","text":"<p>Install DiscoDB:</p> <pre><code>git clone https://github.com/andyluo03/DiscoDB\n</code></pre> <p>Install Dependencies:</p> <pre><code>cd DiscoDB\npip install -r requirements.txt\n</code></pre>"},{"location":"quickstart/#connecting-to-discord","title":"Connecting to Discord","text":"<ol> <li> <p>Go to Discord &gt; Settings &gt; Advanced and enable Developer Mode.</p> </li> <li> <p>Create a Discord server with two text channels: users and logs.</p> </li> <li> <p>Visit the Discord Developer Portal and click the \"New Application\" button in the top right.</p> </li> <li> <p>After clicking create, click \"Bot\" and then the \"Add Bot\" button.</p> </li> <li> <p>Find \"Token\" and click the copy button. Save this somewhere safe for later use.</p> </li> <li> <p>Under Privileged Gateway Intents, toggle Message Content Intents.</p> </li> <li> <p>Finally, click OAuth2 &gt; URL Generator on the left, choose the \"bot\" scope and \"Administrator\" bot permissions. Then, copy the generated URL and invite it the bot to your server.</p> </li> </ol>"},{"location":"quickstart/#configuring-discodb","title":"Configuring DiscoDB","text":"<p>Run <code>db_setup.py</code> to create the database using the command below:</p> <p>Linux/Mac:</p> <pre><code>python3 db_setup.py\n</code></pre> <p>Follow the instructions provided by the setup wizard. It will prompt you to enter the Discord Bot Token from step 5 of \"Connecting to Discord.\" It will also ask for the channel ids for the users and logs channels, which you can obtain by right clicking each channel and clicking copy id.</p> <p>After the setup is complete, confirm that a <code>config.json</code> file in the <code>src</code> directory has been created and populated with the correct information. This file contains the configuration for DiscoDB and should look something like this:</p> <pre><code>{\n    \"HEADERS\" : {\n        \"User-Agent\" : \"DiscordBot\",\n        \"authorization\" : \"Bot &lt;Token&gt;\",\n        \"Content-Type\" : \"application/json\"\n    },\n    \"BASE_URL\" : \"https://discord.com/api\",\n    \"USERS_CHANNEL_ID\" : \"&lt;channel id of users&gt;\",\n    \"LOG_CHANNEL_ID\" : \"&lt;channel id of logs&gt;\",\n    \"SECRET_KEY\" : \"&lt;secret key&gt;\"\n}\n</code></pre>"},{"location":"quickstart/#launching","title":"Launching","text":"<p>Deploy (this will change to a bash script soon):</p> <pre><code>cd src\npython3 app.py\n</code></pre>"},{"location":"quickstart/#first-requests","title":"First Requests","text":"<p>Call <code>http://127.0.0.1:5000/setup</code> with body:</p> <pre><code>{\n    \"name\": \"&lt;username&gt;\",\n    \"password\": \"&lt;password&gt;\"\n}\n</code></pre> <p>This will create the first user with the given username and password. If it succeeded, the users channel for your server should now contain a user.</p> <p>You have now successfully setup DiscoDB, a NoSQL database that promises infinite storage at no cost!</p>"},{"location":"api/log/","title":"Log","text":""},{"location":"api/log/#get-log","title":"<code>GET</code> /log","text":"<p>Headers:</p> <pre><code>N/A\n</code></pre> <p>Body:</p> <pre><code>N/A\n</code></pre> <p>Response:</p> <pre><code>{\n    \"channel_id\": \"id of log channel\"\n}\n</code></pre>"},{"location":"api/login/","title":"Login","text":""},{"location":"api/login/#put-login","title":"<code>PUT</code> /login","text":"<p>Headers:</p> <pre><code>N/A\n</code></pre> <p>Body:</p> <pre><code>{\n    \"name\": \"&lt;username&gt;\",\n    \"password\": \"&lt;password&gt;\"\n}\n</code></pre> <p>Response:</p> <pre><code>{\n    \"Authorization\": \"Bearer &lt;token&gt;\",\n    \"message\": \"User logged in/&lt;error message&gt;\",\n    \"status\": \"success/error\"\n}\n</code></pre>"},{"location":"api/messages/","title":"Messages","text":""},{"location":"api/messages/#post-messages","title":"<code>POST</code> /messages","text":"<p>Posts a new document to a channel</p> <p>Headers:</p> <pre><code>Authorization: Bearer &lt;token&gt;\n</code></pre> <p>Body:</p> <pre><code>{\n    \"channel_id\": \"&lt;channel_id&gt;\",\n    \"content\" : {\n        //DATA\n    }\n}\n</code></pre> <p>Response:</p> <pre><code>{\n    \"message\": \"Data uploaded successfully/&lt;error message&gt;\",\n    \"status\": \"success/error\"\n}\n</code></pre>"},{"location":"api/messages/#put-messages","title":"<code>PUT</code> /messages","text":"<p>Edit a message by id in a channel</p> <p>Headers:</p> <pre><code>Authorization: Bearer &lt;token&gt;\n</code></pre> <p>Body:</p> <pre><code>{\n    \"channel_id\": \"&lt;channel_id&gt;\",\n    \"message_id\": \"&lt;message_id&gt;\",\n    \"content\" : {\n        //DATA\n    }\n}\n</code></pre> <p>Response:</p> <pre><code>{\n    \"message\": \"Data edited successfully/&lt;error message&gt;\",\n    \"status\": \"success/error\"\n}\n</code></pre>"},{"location":"api/messages/#get-messages","title":"<code>GET</code> /messages","text":"<p>Gets message content by id</p> <p>Headers:</p> <pre><code>Authorization: Bearer &lt;token&gt;\n</code></pre> <p>Body:</p> <pre><code>{\n    \"channel_id\": \"&lt;channel_id&gt;\",\n    \"message_id\": \"&lt;message_id&gt;\"\n}\n</code></pre> <p><code>Response:</code></p> <pre><code>{\n    \"content\": {\n        //DATA\n    },\n    \"message\": \"Data retrieved successfully/&lt;error message&gt;\",\n    \"status\": \"success/error\"\n}\n</code></pre>"},{"location":"api/messages/#delete-messages","title":"<code>DELETE</code> /messages","text":"<p>Delete a message by id in a channel</p> <p>Headers:</p> <pre><code>Authorization: Bearer &lt;token&gt;\n</code></pre> <p>Body:</p> <pre><code>{\n    \"channel_id\": \"&lt;channel_id&gt;\",\n    \"message_id\": \"&lt;message_id&gt;\"\n}\n</code></pre> <p>Response:</p> <pre><code>{\n    \"message\": \"Data deleted successfully/&lt;error message&gt;\",\n    \"status\": \"success/error\"\n}\n</code></pre>"},{"location":"api/new_user/","title":"New User","text":""},{"location":"api/new_user/#post-new_user","title":"<code>POST</code> /new_user","text":"<p>Headers:</p> <pre><code>Authorization: Bearer &lt;token&gt;\n</code></pre> <p>Body:</p> <pre><code>{\n    \"name\": \"&lt;username&gt;\",\n    \"password\": \"&lt;password&gt;\"\n}\n</code></pre> <p>Response:</p> <pre><code>{\n    \"message\": \"User created/&lt;error message&gt;\",\n    \"status\": \"success/error\"\n}\n</code></pre>"},{"location":"api/query/","title":"Query","text":""},{"location":"api/query/#get-query","title":"<code>GET</code> /query","text":"<p>Headers:</p> <pre><code>Authorization: Bearer &lt;token&gt;\n</code></pre> <p>Body:</p> <pre><code>{\n    \"channel_id\" : \"&lt;channel_id&gt;\" ,\n    \"attributes\" : {\n        //Attributes is any JSON\n    }\n}\n</code></pre> <p>Response:</p> <pre><code>{\n    \"message_ids\" : [\n        //Messages IDs of All Matches\n    ]\n}\n</code></pre>"},{"location":"api/setup/","title":"Setup","text":""},{"location":"api/setup/#post-setup","title":"<code>POST</code> /setup","text":"<p>Creates the first authorized user for the database, which should appear in the <code>users</code> channel in JSON format. The credentials for this user is the username and password in the request body.</p> <p>Headers:</p> <pre><code>N/A\n</code></pre> <p>Body:</p> <pre><code>{\n    \"name\": \"&lt;username&gt;\",\n    \"password\": \"&lt;password&gt;\"\n}\n</code></pre> <p>Response:</p> <pre><code>{\n    \"message\": \"User created/&lt;error message&gt;\",\n    \"status\": \"success/error\"\n}\n</code></pre>"},{"location":"api/user/","title":"User","text":""},{"location":"api/user/#get-user","title":"<code>GET</code> /user","text":"<p>Headers:</p> <pre><code>N/A\n</code></pre> <p>Body:</p> <pre><code>N/A\n</code></pre> <p>Response:</p> <pre><code>{\n    \"channel_id\": \"id of user channel\"\n}\n</code></pre>"}]}